}
count_goals_in_window(1,10)
(start_time:(start_time:watch_window))
count_goals_in_window = function(start_time, watch_window){
sum(score_vec %in% (start_time:(start_time+watch_window)))
}
count_goals_in_window(1,10)
num_goals_seen = sapply(start_view_times, function(x){
count_goals_in_window(x, x+watch_window)
})
num_goals_seen
hist(num_goals_seen)
table(num_goals_seen)
n_repeats = 1000
start_view_times = sample(1:(match_length-watch_window), n_repeats, replace=TRUE)
num_goals_seen = sapply(start_view_times, function(x){
count_goals_in_window(x, x+watch_window)
})
table(num_goals_seen)
?table
table(num_goals_seen)/n_repeats
mean(num_goals_seen)
avg_min_between
num_goals_seen
length(score_vec)/9
score_vec
sort(score_Vec)
sort(score_vec)
num_goals_seen = sapply(start_view_times, function(x){
count_goals_in_window(x, watch_window)
})
num_goals_seen
length(score_vec)/9
mean(num_goals_seen)
table(num_goals_seen)/n_repeats
length(score_vec)/9
mean(num_goals_seen)
var(num_goals_seen)
sd(num_goals_seen)
.843**2
1:5 %in% 1:10
1:5 %in% 1:4
sum(1:5 %in% 1:4)
strptime("7/31/2012 12:56 AM", format="%Y-%m-%d %I:%M %p")
strptime("7/31/2012 12:56 AM", format="%m/%d%Y %I:%M %p")
strptime("7/31/2012 12:56 AM", format="%m/%d/%Y %I:%M %p")
?sample
?chisq.test
chisq.test(rnorm(20))
chisq.test(20+rnorm(20))
chisq.test(20+2*rnorm(20))
chisq.test(40+2*rnorm(20))
x1 = 20+rnorm(20)
x2 = 40+2*rnorm(20)
15.2*2.5^(-5)
15.2*2.4^(-5)
15.2*(2.4^(-5))
94/65
65/94
50/70
40/50
csb = 47600
sju = 55900
csb/sju
num_decks = 1
##------Create deck-----
suits = c('H','D','S','C')
ranks = 1:13
one_deck = expand.grid(ranks, suits)
names(one_deck) = c("suit", "rank")
one_deck$card = paste(one_deck$suit, one_deck$rank)
deck = one_deck[rep(seq_len(nrow(one_deck)), num_decks),]
rm(one_deck)
card_vec = deck$card
three_cards = expand.grid(card_vec, card_vec, card_vec)
three_cards$any_equal = apply(three_cards, 1, function(x) anyDuplicated(x))
three_cards = three_cards[three_cards$any_equal==0,]
head(three_cards)
strsplit(three_cards$Var1[1]," ")[[1]][2]
three_cards$Var1[1]
str(deck)
deck$card = as.character(deck$card)
str(deck)
deck$rank = as.character(deck$rank)
str(deck)
one_deck$card = paste(one_deck$suit, one_deck$rank)
one_deck = expand.grid(ranks, suits)
names(one_deck) = c("suit", "rank")
one_deck$rank = as.character(one_deck$rank)
one_deck$card = paste(one_deck$suit, one_deck$rank)
str(one_deck)
one_deck$card = as.character(one_deck$card)
str(one_deck)
one_deck$card = sapply(1:nrow(one_deck), function(x){
paste(one_deck$rank[x], one_deck$suit[x])
})
str(one_deck)
one_deck$suit = as.character(one_deck$suit)
str(one_deck)
one_deck$card = sapply(1:nrow(one_deck), function(x){
paste(one_deck$rank[x], one_deck$suit[x])
})
str(one_deck)
one_deck$card = as.vector(sapply(1:nrow(one_deck), function(x){
paste(one_deck$rank[x], one_deck$suit[x])
}))
str(one_deck)
one_deck = expand.grid(ranks, suits)
names(one_deck) = c("rank", "suit")
one_deck$rank = as.character(one_deck$rank)
one_deck$suit = as.character(one_deck$suit)
one_deck$card = as.vector(sapply(1:nrow(one_deck), function(x){
paste(one_deck$rank[x], one_deck$suit[x])
}))
one_deck
str(one_deck)
one_deck$card[1]
one_deck$card = as.character(one_deck$card)
str(one_deck)
deck = one_deck[rep(seq_len(nrow(one_deck)), num_decks),]
str(deck)
rm(one_deck)
card_vec = deck$card
card_vec
three_cards = expand.grid(card_vec, card_vec, card_vec)
head(three_cards)
three_cards$any_equal = apply(three_cards, 1, function(x) anyDuplicated(x))
three_cards = three_cards[three_cards$any_equal==0,]
head(three_cards)
132600/6
three_cards$any_equal = NULL
strsplit(three_cards$Var1[1]," ")[[1]][2]
three_cards$Var1[1[]
]
str(three_cards)
?expand.grid
three_cards = expand.grid(card_vec, card_vec, card_vec,
stringsAsFactors = FALSE)
three_cards$any_equal = apply(three_cards, 1, function(x) anyDuplicated(x))
three_cards = three_cards[three_cards$any_equal==0,]
three_cards$any_equal = NULL
str(three_cards)
three_cards$suit1 = strsplit(three_cards$Var1," ")[[1]][2]
head(three_cards)
three_cards$suit1 = strsplit(three_cards$Var1," ")[[1]][2]
three_cards$rank1 = strsplit(three_cards$Var1," ")[[1]][1]
three_cards$suit2 = strsplit(three_cards$Var2," ")[[1]][2]
three_cards$rank2 = strsplit(three_cards$Var2," ")[[1]][1]
three_cards$suit3 = strsplit(three_cards$Var3," ")[[1]][2]
three_cards$rank3 = strsplit(three_cards$Var3," ")[[1]][1]
head(three_cards)
str(three_cards)
three_cards$hand = apply(three_cards, 1, function(x){
paste( x$Var1, x$Var2, x$Var3, collapse=".")
})
three_cards$hand = apply(three_cards, 1, function(x){
paste( x["Var1"], x["Var2"], x["Var3"], collapse=".")
})
head(three_cards)
three_cards$hand[1]
?paste
paste("1st", "2nd", "3rd", sep = ", ")
three_cards$hand = apply(three_cards, 1, function(x){
paste(x["Var1"], x["Var2"], x["Var3"], sep=".")
})
head(three_cards)
three_cards$sorted = sapply(three_cards$hand, function(x){
paste(sort(strsplit(x,".")[[1]]), sep=".")
})
head(three_cards)
sort(strsplit(three_cards$hand[1],".")[[1]])
sort(strsplit(three_cards$hand[1],"/.")[[1]])
sort(strsplit(three_cards$hand[1],"//.")[[1]])
strsplit(three_cards$hand[1],"//.")[[1]]
strsplit(three_cards$hand[1],"/.")[[1]]
strsplit(three_cards$hand[1],"[.]")[[1]]
three_cards$sorted = sapply(three_cards$hand, function(x){
paste(sort(strsplit(x,"[.]")[[1]]), sep=".")
})
paste(sort(strsplit(three_cards$hand[1],"[.]")[[1]]), sep=".")
paste(sort(strsplit(three_cards$hand[1],"[.]")[[1]]), collapse=".")
three_cards$sorted = sapply(three_cards$hand, function(x){
paste(sort(strsplit(x,"[.]")[[1]]), collapse=".")
})
head(three_cards)
three_cards = three_cards[!duplicated(three_cards$sorted),]
head(three_cards)
three_cards$ranks = paste(substr(three_cards$rank1,1,1),
substr(three_cards$rank2,1,1),
substr(three_cards$rank3,1,1))
head(three_cards)
three_cards$suits = paste(substr(three_cards$suit1,2,2),
substr(three_cards$suit2,2,2),
substr(three_cards$suit3,2,2))
head(three_cards)
three_cards$ranks = paste(three_cards$rank1,1,1,
three_cards$rank2,1,1,
three_cards$rank3,1,1)
three_cards$ranks = paste(three_cards$rank1,
three_cards$rank2,
three_cards$rank3)
three_cards$suits = paste(three_cards$suit1,
three_cards$suit2,
three_cards$suit3)
head(three_cards)
straight_flush_test = function(ranks, suits){
suit_logical = all(suits==suits[1])
rank_logical = (all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13))
return(suit_logical & rank_logical)
}
sf_test = apply(three_cards,1,function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
straight_flush_test(ranks, suits)
})
sum(sf_test)
head(sf_test)
ranks = as.numeric(strsplit(three_cards[1,'ranks']," ")[[1]])
ranks
suits = strsplit(three_cards[1,'suits']," ")[[1]]
suit
suits
all(suits==suits[1])
(all(diff(sort(ranks))==1))
all(sort(ranks)==c(1,12,13))
ranks = as.numeric(strsplit(three_cards[2,'ranks']," ")[[1]])
ranks
head(three_cards)
three_cards$ranks = sapply(1:nrow(three_cards), function(x){
paste(three_cards$rank1[x],
three_cards$rank2[x],
three_cards$rank3[x])
})
three_cards$suits = sapply(1:nrow(three_cards), function(x){
paste(three_cards$suit1[x],
three_cards$suit2[x],
three_cards$suit3[x])
})
head(three_cards)
three_cards$suit1 = sapply(1:nrow(three_cards), function(x){
strsplit(three_cards$Var1[x]," ")[[1]][2]
})
three_cards$rank1 = sapply(1:nrow(three_cards), function(x){
strsplit(three_cards$Var1[x]," ")[[1]][1]
})
three_cards$suit2 = sapply(1:nrow(three_cards), function(x){
strsplit(three_cards$Var2[x]," ")[[1]][2]
})
three_cards$rank2 = sapply(1:nrow(three_cards), function(x){
strsplit(three_cards$Var2[x]," ")[[1]][1]
})
three_cards$suit3 = sapply(1:nrow(three_cards), function(x){
strsplit(three_cards$Var3[x]," ")[[1]][2]
})
three_cards$rank3 = sapply(1:nrow(three_cards), function(x){
strsplit(three_cards$Var3[x]," ")[[1]][1]
})
head(three_cards)
three_cards$hand = apply(three_cards, 1, function(x){
paste(x["Var1"], x["Var2"], x["Var3"], sep=".")
})
three_cards$sorted = sapply(three_cards$hand, function(x){
paste(sort(strsplit(x,"[.]")[[1]]), collapse=".")
})
head(three_cards)
three_cards = three_cards[!duplicated(three_cards$sorted),]
three_cards$ranks = sapply(1:nrow(three_cards), function(x){
paste(three_cards$rank1[x],
three_cards$rank2[x],
three_cards$rank3[x])
})
three_cards$suits = sapply(1:nrow(three_cards), function(x){
paste(three_cards$suit1[x],
three_cards$suit2[x],
three_cards$suit3[x])
})
head(three_cards)
sf_test = apply(three_cards,1,function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
straight_flush_test(ranks, suits)
})
sum(sf_test)
three_of_a_kind_test = function(ranks){
return(all(ranks==ranks[1]))
}
three_kind_test = apply(three_cards,1,function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
three_of_a_kind_test(ranks)
})
sum(three_kind_test)
straight_test = function(ranks){
return(all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13))
}
straight_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
straight_test(ranks)
})
sum(straight_test_run)
head(three_cards[straight_test_run==TRUE,])
tail(three_cards[straight_test_run==TRUE,])
ranks=c(12,13,1)
straight_test(ranks)
all(sort(ranks)==c(1,12,13))
straight_test = function(ranks){
return((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
}
straight_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
straight_test(ranks)
})
sum(straight_test_run)
straight_test = function(ranks, suits){
suit_logical_diff = !(all(suits==suits[1]))
rank_logical = (all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13))
return(suit_logical_diff & rank_logical)
}
straight_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
straight_test(ranks,suits)
})
sum(straight_test_run)
flush_test = function(ranks,suit){
suit_logical = all(suits==suits[1])
rank_logical_diff = !((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
return(suit_logical & rank_logical_diff)
}
flush_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
flush_test(ranks,suits)
})
sum(flush_test_run)
21332/2
head(three_cards[flush_test_run==TRUE,])
tail(three_cards[flush_test_run==TRUE,])
three_cards[flush_test_run==TRUE,1000]
three_cards[1000,flush_test_run==TRUE]
three_cards[flush_test_run==TRUE,][1000,]
suits = c('S','S','H')
all(suits==suits[1])
ranks = c(9,4,1)
!((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
suit_logical = all(suits==suits[1])
rank_logical_diff = !((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
suit_logical & rank_logical_diff
flush_test = function(ranks,suit){
suit_logical = all(suits==suits[1])
rank_logical_diff = !((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
return(suit_logical & rank_logical_diff)
}
flush_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
flush_test(ranks,suits)
})
sum(flush_test_run)
rm(ranks,suits)
flush_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
flush_test(ranks,suits)
})
straight_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
straight_test(ranks,suits)
})
flush_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
flush_test(ranks,suits)
})
flush_test = function(ranks,suits){
suit_logical = all(suits==suits[1])
rank_logical_diff = !((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
return(suit_logical & rank_logical_diff)
}
flush_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
flush_test(ranks,suits)
})
sum(flush_test_run)
c(1,1,2)
t = c(1,1,2)
duplicate(t)
duplicated(t)
any(duplicated(t))
any(duplicated(c(1,1,1)))
any(duplicated(c(1,2,3)))
pair_test = function(ranks, suits){
suit_logical_diff = !(all(suits==suits[1]))
rank_logical_diff = !((all(diff(sort(ranks))==1)) | all(sort(ranks)==c(1,12,13)))
pair_logical = any(duplicated(ranks))
return(suit_logical_diff & rank_logical_diff & pair_logical)
}
pair_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
pair_test(ranks,suits)
})
sum(pair_test_run)
sum(duplicated(t))
sum(duplicated(c(1,1,2)))
sum(duplicated(c(5,1,2)))
pair_test = function(ranks, suits){
suit_logical_diff = !(all(suits==suits[1]))
pair_logical = (sum(duplicated(ranks))==1)
return(suit_logical_diff & pair_logical)
}
pair_test_run = apply(three_cards, 1, function(x){
ranks = as.numeric(strsplit(x['ranks']," ")[[1]])
suits = strsplit(x['suits']," ")[[1]]
pair_test(ranks,suits)
})
sum(pair_test_run)
##--------------------------------------------
##
## R code review (lecture 1)
##
## Class: PCE Data Science Methods Class
##
## Contains examples of:
##
## -Matrices, Dataframe, data.table, apply functions.
##
## -Reading text data, reading web data.
##
## - Dealing with SQLite DBs.
##
##--------------------------------------------
##----Import Libraries----
library(data.table)
library(logging)
library(RSQLite)
setwd('E:/Work/Teaching/PCE_Data_Science/1_Intro_Lecture')
A_matrix = matrix(4, nrow=4, ncol=3) # Makes use of broadcasting
B_matrix = matrix(1:50, nrow=4, ncol=3)
A_matrix + B_matrix # Elementwise
A_matrix * B_matrix # Elementwise
A_matrix %*% B_matrix # Error in matrix multiplication
A_matrix %*% t(B_matrix)
x_values = seq(from=as.Date('2015-01-01'),
to=as.Date('2015-02-12'),
by = 3)
df = data.frame('dates' = x_values,
'x1'    = runif(15,-10,20),
'x2'    = 1:15,
'x3'    = strsplit('MississippiMath','')[[1]])
df
df$x3 = as.character(df$x3)
df$x3 = tolower(df$x3)
str(df)
head(df)
tail(df, n=10)
df = as.data.table(df)
df[,sum(x1)]
df[,c(sum(x1),sd(x2))]
df[,c(Sum = sum(x1),
StDev = sd(x2))]
df[,sum(x1), by=x3]
df[,sum(x1), by=x3]
df[1:3, sum(x1), by=x3]
df[, x4:= x1+x2]
df
df[,c('x4', 'x5') := list(x1+x2, x1-x2),]
df
df2 = data.frame('label'  = c('m','i','s','p','a','t'),
'newval' = 5:10)
df2
df2 = as.data.table(df2)
setkey(df,'x3')
setkey(df2,'label')
df_inner = df[df2]  # no more h! (inner join by default)
df_inner
df_outer = merge(df, df2, all=TRUE) # not quite
df_outer = merge(df, df2, all.x=TRUE, all.y=TRUE, by.x='x3', by.y='label') # nope!
setnames(df, 'x3', 'label')
df_outer = merge(df, df2, all=TRUE, by='label')
df_outer
apply(B_matrix, 1, median) # Across rows (2 = across columns)
B_matrix
test_function = function(a, b){
return(ifelse(a>0.5, sin(a),b))
}
apply(df, 1, function(x) test_function(as.numeric(x['x1']),
as.numeric(x['x2'])))
x
str(df)
lapply(df, as.character)
data.frame(lapply(df, as.character))
medals_data <- read.table("medals.txt", sep="\t", header=TRUE)
str(medals_data)
pairs(medals_data, pch=16)
library(XML)
nfl_site = "http://www.usatoday.com/sports/nfl/arrests/"
nfl_html = readHTMLTable(nfl_site)
nfl_data = nfl_html[[1]]
str(nfl_data)
db_file = 'test_db.db'
# Open connection
conn = dbConnect(dbDriver("SQLite"), dbname=db_file)
# Write data frame to db
dbWriteTable(conn, 'table_name', medals_data, overwrite=TRUE)
# Pull data from SQLite DB
query_string = 'SELECT * FROM table_name WHERE Population >= 100'
query_string
dbGetQuery(conn, query_string)
require(logging)
?logerror
